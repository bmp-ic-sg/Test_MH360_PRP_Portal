Vue.use(window.vuelidate.default);
const { required, requiredIf, email, sameAs } = window.validators;

var main = new Vue({
    el: "#registration",
    data: {
        firstName: "",
        lastName: "",
        gender: "female",
        dob: "",
        nationality: "",
        cor: "",
        idNumber: "",
        idNumberType: "nric/fin",
        email: "",
        phone: "",
        password: "",
        rePassword: "",
        consentMarketing: false,
        race: "",
        myInfo: "",
        countryIso: "",
        countries: [],
        showPassword: false,
        showPassword2: false,
        isDisabledTab: true,
        isRegistrationTab: true,
        isReviewTab: false,
        isAPIError: false,
        isLoading: false,
        isLoadingOk: false,
        isEmailExists: false,
        itl: null,
        itl2: null,
        successMessage: false,
        isFirstTimeGoToStep2: false,
        forwardFromSubmitAlready: false,
        firstAttemptSessionFromLocalStorage: false
    },
    validations: {
        firstName: {
            required,
            alpha: function (firstName) {
            	return /^[a-zA-Z /,'-]*$/.test(firstName);
            }
        },
        lastName: {
            required: requiredIf(function () {
                return this.myInfo === false;
            }),
            alpha: function (lastName) {
                return this.myInfo === false
                    ? /^[a-zA-Z /,'-]*$/.test(lastName)
                    : lastName === ""
                    ? true
                    : true;
            },
        },
        gender: {
            required,
        },
        dob: {
            required,
        },
        idNumber: {
            required,
            validateNumber: (idNumber, data) => {
                idNumber = idNumber.trim().toUpperCase();
                if (data.idNumberType === "nric/fin") {
                    // Initialization
                    const checksumArr_ST = ["J", "Z", "I", "H", "G", "F", "E", "D", "C", "B", "A"],
                    checksumArr_FG = ["X", "W", "U", "T", "R", "Q", "P", "N", "M", "L", "K"];

                    function checksum(prefix, number) {
                        // Calculate checksum of digital fragment of NRIC/FIN
                        function stringToSum(number) {
                            const multiplyFactors = [2, 7, 6, 5, 4, 3, 2];
                            return number
                                .split("")
                                .map((s) => parseInt(s))
                                .map((digit, i) => digit * multiplyFactors[i])
                                .reduce((a, b) => a + b, 0);
                        }
                        prefix = prefix.toUpperCase();
                        let sum = 0;
                        if (prefix === "T" || prefix === "G") sum = 4; // an offset if start with T/G
                        sum += stringToSum(number);
                        switch (prefix) {
                            case "S":
                            case "T":
                                return checksumArr_ST[sum % 11];
                            case "F":
                            case "G":
                                return checksumArr_FG[sum % 11];
                            default:
                                throw new Error("Invalid Prefix detected");
                        }
                    }

                    //Check if the format is correct, then check the checksum
                    if (
                        !/^[S|T]\d{7}[J|Z|I|H|G|F|E|D|C|B|A]|[F|G]\d{7}[X|W|U|T|R|Q|P|N|M|L|K]$/.test(
                            idNumber
                        )
                    ) {
                        return 0;
                    }
                    const prefix = idNumber[0].toUpperCase();
                    const number = idNumber.slice(1, -1);
                    const oldChecksum = idNumber.slice(-1).toUpperCase();

                    return oldChecksum === checksum(prefix, number)
                        ? true
                        : false;
                } else {
                    // Check Passport ID
                    return /^(?!^0+$)[a-zA-Z0-9']{4,10}$/.test(idNumber) ? true : false;
                }
            },
        },
        idNumberType: {
            required,
        },
        email: {
            required,
            isValidEmail: function(email) {
                const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(String(email).toLowerCase());
            }
        },
        phone: {
            required,
        },
        password: {
            required: requiredIf(function () {
                return this.isReviewTab === true;
            }),
            goodPassword: function (password) {
            	return this.isReviewTab === true ? password.length >= 8 && /[a-z]/.test(password) && /[A-Z]/.test(password) : true;
            },
        },
        rePassword: {
            required: requiredIf(function () {
                return this.isReviewTab === true;
            }),
            sameAsPassword: sameAs("password"),
        },
    },
    methods: {
        handleTab: function (isFromHistoryState) {
            if (
                isFromHistoryState &&
                (this.isReviewTab || this.firstTabInvalid)
            ) {
                this.isRegistrationTab = true;
                this.isReviewTab = false;
                this.isDisabledTab = true;
                this.showPassword = false;
                this.showPassword2 = false;
            }else{
                window.history.back();
            }
        },
        handleSubmit: async function (isFromHistoryState) {
            var vm = this;
            var ignoreForward = false;
            if(vm.isReviewTab){
                ignoreForward = true;
            }
            if(!vm.isFirstTimeGoToStep2 || isFromHistoryState){
                vm.isAPIError = false;
                vm.isEmailExists = false;
                try {
                    if (!vm.firstTabInvalid && !vm.isExceeded()) {
                        vm.isLoading = true;
                        await axios
                            .post(CONTEXT_URL + "/rest/users/email/validate", {
                                email: vm.email,
                            })
                            .then(function (response) {
                                console.log(response);
                                if (response.status === 200) {
                                    // Get country data
                                    var nationality = $(
                                        "#nationality"
                                    ).nationalitySelect(
                                        "getSelectedNationalityData"
                                    );
                                    var country = $("#country").countrySelect(
                                        "getSelectedCountryData"
                                    );

                                    // Set state data
                                    vm.isRegistrationTab = false;
                                    vm.isReviewTab = true;
                                    vm.isDisabledTab = false;
                                    vm.nationality = vm.myInfo ? vm.nationality : nationality.name;
                                    vm.cor = country.name;

                                    // Scroll to top after next button is clicked
                                    window.scrollTo(0, 0);

                                    // Set country into field
                                    $("#nationality2").nationalitySelect(
                                        "selectNationality",
                                        nationality.iso2
                                    );
                                    $("#country2").countrySelect(
                                        "selectCountry",
                                        country.iso2
                                    );

                                    if(!vm.firstAttemptSessionFromLocalStorage){
                                        if(!vm.isFirstTimeGoToStep2){
                                            window.history.pushState({urlPath:'register'},"step2","register?step=2")
                                            vm.isFirstTimeGoToStep2 = true;
                                        }else{
                                            if(!ignoreForward){
                                                window.history.forward();
                                                vm.forwardFromSubmitAlready = true;
                                            }
                                        }
                                    }else{
                                        vm.firstAttemptSessionFromLocalStorage = false;
                                    }

                                    setTimeout(function(){
                                        $(window).trigger('resize');
                                    }, 10)
                                }
                            })
                            .catch(function (error) {
                                console.log(error.response);
                                if (error.response.status === 409) {
                                    vm.isEmailExists = true;
                                } else {
                                    vm.isAPIError = true;
                                }
                            })
                            .then(() => {
                                vm.isLoading = false;
                            });
                    }else{
                        window.history.back();
                    }
                } catch (error) {
                    console.log(error);
                }
            }else{
                window.history.forward();
            }
        },
        onSubmit: async function () {
            var vm = this;
            var idNumber = vm.idNumber.toUpperCase();
            var phoneNumber = vm.phone.replace(/\s/g, "");
            vm.$v.$touch();
            try {
                if(!vm.secondTabInvalid) {
                	vm.isLoading = true;
                	await axios
                        .post(CONTEXT_URL + "/rest/users", {
                            firstName: vm.firstName,
                            lastName: vm.myInfo ? " " : vm.lastName,
                            email: vm.email,
                            dob: vm.dob,
                            id: idNumber,
                            mobileNo: phoneNumber,
                            mobileCountryCode: vm.countryIso.dialCode,
                            gender: vm.gender,
                            password: vm.password,
                            country: vm.cor,
                            nationality: vm.nationality,
                            consentMarketing: vm.consentMarketing,
                            race: vm.race
                        })
                        .then(function (response) {
                            console.log(response);
                            if (response.status === 200) {
                                // document.location.href =
                                //     CONTEXT_URL + "/register/success";
                                vm.successMessage = true;
                                setTimeout(function(){
                                    $(".uss-message-tips").removeClass("d-none");
                                });
                            }
                        })
                        .catch(function (error) {
                            console.log(error.response);
                            vm.isAPIError = true;
                        })
                        .then(() => {
                            vm.isLoading = false;
                        });
                }
            } catch (error) {
                console.log(error);
            }
        },
        togglePassword: function (input) {
            if (input === "password") {
                this.showPassword = !this.showPassword;
            } else {
                this.showPassword2 = !this.showPassword2;
            }
        },
        setIntlInput: function () {
            var phoneNumber = localStorage.phone ? localStorage.phone : "";
            var result = "";
            while (phoneNumber.length > 0) {
                result = result + " " + phoneNumber.substring(0, 4);
                phoneNumber = phoneNumber.substring(4);
            }
            this.phone = result;
            this.countryIso = this.parseCountryIso();
            const input = document.querySelector("#phone");
            const input2 = document.querySelector("#phone2");
            this.itl = window.intlTelInput(input, {
                separateDialCode: true,
                autoPlaceholder: "polite",
                preferredCountries: [this.countryIso.iso2],
                utilsScript: "js/vendor/intl-tel-input/utils.js", // just for formatting/placeholders etc
            });
            this.itl2 = window.intlTelInput(input2, {
                separateDialCode: true,
                autoPlaceholder: "polite",
                preferredCountries: [this.countryIso.iso2],
                utilsScript: "js/vendor/intl-tel-input/utils.js", // just for formatting/placeholders etc
            });
        },
        setCountries: function () {
            var vm = this;
            // NATIONALITY
            $("#nationality").nationalitySelect({
                defaultNationality: "sg",
                preferredNationalities: ["sg", "id", "my"],
            });
            $("#nationality2").nationalitySelect();

            // COUNTRY OF RESIDENCE
            $("#country").countrySelect({
                preferredCountries: ["sg", "id", "my"],
            });

            if (vm.cor) $("#country").countrySelect("setCountry", vm.cor);

            $("#country2").countrySelect();
        },
        getMyInfoUser: async function () {
            var vm = this;
            if(localStorage.getItem('previousFormData')){
                vm.isReviewTab = true;
                this.checkFormState();
                this.setCountries();
            }else{
                try {
                    await axios
                        .get(CONTEXT_URL + "/rest/myinfo/user")
                        .then((response) => {
                            if (response.status === 200) {
                                console.log(response.data);
                                var data = response.data.user;
                                vm.myInfo = response.data.isMyInfo;
                                if (vm.myInfo) {
                                    vm.firstName = data.name;
                                    vm.gender = data.gender;
                                    vm.dob = data.dob;
                                    vm.nationality = data.nationality;
                                    vm.race = data.race;
                                    vm.cor = data.country;
                                    vm.idNumber = data.id;
                                    vm.idNumberType = "nric/fin";
                                    vm.email = (data.email || "").toLowerCase();
                                }
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                        this.setCountries();
                } catch (error) {
                    console.log(error);
                }
            }
        },
        setDefaultDate: function () {
        	if (this.dob === "") {
        		this.dob = "1980-01-01";
        	}
        },
        dobSettings: function () {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; // January is 0
            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = "0" + dd;
            }
            if (mm < 10) {
                mm = "0" + mm;
            }
            today = yyyy + "-" + mm + "-" + dd;
            document.getElementById("datePicker").setAttribute("max", today);
        },
        isExceeded: function () {
            var vm = this;
            var d1 = new Date(vm.dob);
            var d2 = new Date();
            return d1 > d2;
        },
        parseCountryIso: function () {
            if (localStorage.getItem("countryIso")) {
                try {
                    return JSON.parse(localStorage.getItem("countryIso"));
                } catch (e) {
                    localStorage.removeItem("countryIso");
                }
            }
        },
        getRedirectURL: function () {
            var vm = this;
            axios.get(CONTEXT_URL + "/rest/redirect").then((response) => {
                vm.redirectUri = response.data.redirectUri;
                vm.isLoading = false;
            });
        },
        gotoLogin: async function () {
            var vm = this;
            vm.isLoadingOk = true;
            try {
                await axios
                    .get(CONTEXT_URL + "/rest/sessions/clear")
                    .then((response) => {
                        localStorage.removeItem("countryIso");
                        localStorage.removeItem("phone");
                        vm.isLoadingOk = false;
                        console.log(response);
                        window.location.href = vm.redirectUri;
                    })
                    .catch((error) => {
                        console.log(error.response);
                    });
            } catch (error) {
                console.log(error);
                vm.isLoadingOk = false;
            }
        },
        saveFormState: function() {
            var vm = this;
            var idNumber = vm.idNumber.toUpperCase();
            var phoneNumber = vm.phone.replace(/\s/g, "");
            var formData = {
                firstName: vm.firstName,
                lastName: vm.lastName,
                email: vm.email,
                dob: vm.dob,
                id: idNumber,
                mobileNo: phoneNumber,
                mobileCountryCode: vm.countryIso.dialCode,
                gender: vm.gender,
                password: vm.password,
                country: vm.cor,
                nationality: vm.nationality,
                consentMarketing: vm.consentMarketing,
                race: vm.race,
                idNumberType: vm.idNumberType,
                password: vm.password,
                rePassword: vm.rePassword,
                myInfo: vm.myInfo
            };

            localStorage.setItem('previousFormData', JSON.stringify(formData));

            setTimeout(function(){
                window.location.href = CONTEXT_URL + "/terms-and-conditions";
            }, 10)
        },
        checkFormState: function() {
            var vm = this;
            var previousFormData = localStorage.getItem('previousFormData') || null;
            if(previousFormData){
                var formData = JSON.parse(previousFormData);
                if(formData){
                    vm.firstName = formData.firstName;
                    vm.lastName = formData.lastName;
                    vm.email = (formData.email || "").toLowerCase();
                    vm.dob = formData.dob;
                    vm.idNumber = formData.id;
                    vm.phone = formData.mobileNo;
                    vm.countryIso.dialCode = formData.mobileCountryCode;
                    vm.gender = formData.gender;
                    vm.cor = formData.country;
                    vm.nationality = formData.nationality;
                    $("#nationality").val(vm.nationality)
                    vm.consentMarketing = formData.consentMarketing;
                    vm.race = formData.race;
                    vm.idNumberType = formData.idNumberType;
                    vm.password = formData.password;
                    vm.rePassword = formData.rePassword;
                    vm.myInfo = formData.myInfo;
                    setTimeout(function(){
                        $("#nextButton").trigger("click");
                        vm.$v.password.$touch();
                        vm.$v.rePassword.$touch();
                    });
                    vm.isFirstTimeGoToStep2 = true;
                    vm.firstAttemptSessionFromLocalStorage = true;
                }
            }
            localStorage.removeItem('previousFormData');
        }
    },
    mounted: function () {
        var vm = this;
        this.getRedirectURL();
        this.getMyInfoUser();
        this.setIntlInput();
        this.dobSettings();
        this.setDefaultDate();
        $(window).on("popstate", function(e) {
            var urlString = e.target.location.href;
            var url = new URL(urlString);
            var step = url.searchParams.get("step");
            if(!step || step != "2"){
                vm.handleTab(true);
            }else{
                // Avoid double submit from "Next" button and from .forward() inside handleSubmit() | The correct one is from "Next" button
                if(!vm.forwardFromSubmitAlready){
                    vm.handleSubmit(true);
                }
                vm.forwardFromSubmitAlready = false;
            }
        });
        $(window).on('resize', function(){
            var height = $("#review-reminder").height() + 20;
            $("#nav-profile").css("padding-top", height);
        });
        setTimeout(function(){
            $(window).trigger('resize');
        }, 10)
    },
    computed: {
        firstTabInvalid: function() {
            var nationality = $(
                "#nationality"
            ).nationalitySelect(
                "getSelectedNationalityData"
            );
            var country = $("#country").countrySelect(
                "getSelectedCountryData"
            );

            return this.$v.firstName.$invalid || 
                this.$v.lastName.$invalid ||
                this.$v.gender.$invalid ||
                this.$v.dob.$invalid ||
                this.$v.idNumberType.$invalid ||
                this.$v.idNumber.$invalid ||
                this.$v.email.$invalid ||
                this.$v.phone.$invalid ||
                !nationality ||
                !country
        },
        secondTabInvalid: function() {
            return this.firstTabInvalid ||
                this.$v.password.$invalid ||
                this.$v.rePassword.$invalid
        }
    }
});
